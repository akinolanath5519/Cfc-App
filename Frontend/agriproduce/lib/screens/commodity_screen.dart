import 'package:agriproduce/data_models/commodity_model.dart';
import 'package:agriproduce/state_management/commodity_provider.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

class CommodityScreen extends ConsumerStatefulWidget {
  @override
  _CommodityScreenState createState() => _CommodityScreenState();
}

class _CommodityScreenState extends ConsumerState<CommodityScreen> {
  bool isLoading = false;

  @override
  void initState() {
    super.initState();
    // Fetch commodities when screen loads
    _fetchCommodities();
  }

  Future<void> _fetchCommodities() async {
    setState(() {
      isLoading = true;
    });

    try {
      await ref.read(commodityNotifierProvider.notifier).fetchCommodities(ref);
    } catch (error) {
      print('Error fetching commodities: $error');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error fetching commodities')),
      );
    } finally {
      setState(() {
        isLoading = false;
      });
    }
  }

  void _showCommodityDialog(BuildContext context, {Commodity? commodity}) {
    final nameController = TextEditingController(text: commodity?.name);
    final rateController = TextEditingController(text: commodity?.rate.toString());

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(commodity == null ? 'Add Commodity' : 'Edit Commodity'),
          content: Padding(
            padding: const EdgeInsets.symmetric(vertical: 8.0), // Improved padding
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: nameController,
                  decoration: InputDecoration(labelText: 'Name'),
                ),
                SizedBox(height: 16.0), // Spacing between input fields
                TextField(
                  controller: rateController,
                  decoration: InputDecoration(
                    labelText: 'Rate',
                    hintText: 'Enter rate',
                  ),
                  keyboardType: TextInputType.number,
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text('Cancel'),
            ),
            ElevatedButton(
              onPressed: () async {
                try {
                  if (commodity == null) {
                    // Create new commodity
                    await ref.read(commodityNotifierProvider.notifier).createCommodity(ref, Commodity(
                      id: '', // ID will be generated by the server
                      name: nameController.text,
                      rate: double.tryParse(rateController.text) ?? 0.0,
                    ));
                  } else {
                    // Edit existing commodity
                    await ref.read(commodityNotifierProvider.notifier).updateCommodity(ref, commodity.id, Commodity(
                      id: commodity.id,
                      name: nameController.text,
                      rate: double.tryParse(rateController.text) ?? 0.0,
                    ));
                  }

                  _fetchCommodities(); // Refresh the list
                  Navigator.of(context).pop(); // Close dialog
                } catch (error) {
                  print('Error ${commodity == null ? 'adding' : 'updating'} commodity: $error');
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Error ${commodity == null ? 'adding' : 'updating'} commodity')),
                  );
                }
              },
              child: Text(commodity == null ? 'Add' : 'Save'),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    final commodities = ref.watch(commodityNotifierProvider);

    return Scaffold(
      appBar: AppBar(title: Text('Commodities')),
      body: Stack(
        children: [
          // Light background color for the entire screen
          Container(color: Colors.grey[100]),
          isLoading
              ? Center(
                  child: Container(
                    color: Colors.black54, // Full-screen overlay
                    child: Center(
                      child: CircularProgressIndicator(), // Spinner
                    ),
                  ),
                )
              : ListView.builder(
                  padding: EdgeInsets.symmetric(vertical: 16.0), // Consistent vertical padding
                  itemCount: commodities.length,
                  itemBuilder: (context, index) {
                    final commodity = commodities[index];
                    return _buildCommodityTile(commodity, context);
                  },
                ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => _showCommodityDialog(context),
        child: Icon(Icons.add),
      ),
    );
  }

  Widget _buildCommodityTile(Commodity commodity, BuildContext context) {
    return Column(
      children: [
        ListTile(
          title: Text(
            commodity.name,
            style: TextStyle(fontWeight: FontWeight.bold, fontSize: 18),
          ),
          subtitle: Text(
            'Rate: ${commodity.rate}',
            style: TextStyle(color: Colors.grey[600], fontSize: 16),
          ),
          trailing: Row(
            mainAxisSize: MainAxisSize.min,
            children: [
              IconButton(
                icon: Icon(Icons.edit, color: Theme.of(context).primaryColor),
                onPressed: () => _showCommodityDialog(context, commodity: commodity),
              ),
              IconButton(
                icon: Icon(Icons.delete, color: Colors.red),
                onPressed: () {
                  ref.read(commodityNotifierProvider.notifier).deleteCommodity(ref, commodity.id);
                },
              ),
            ],
          ),
        ),
        Divider(thickness: 1.0, color: Colors.grey[300]), // Faint line separator
      ],
    );
  }
}
